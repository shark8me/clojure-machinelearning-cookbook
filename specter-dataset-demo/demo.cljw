;; gorilla-repl.fileformat = 1

;; **
;;; # Gorilla REPL
;;; 
;;; Welcome to gorilla :-)
;;; 
;;; Shift + enter evaluates code. Hit alt+g twice in quick succession or click the menu icon (upper-right corner) for more commands ...
;;; 
;;; It's a good habit to run each worksheet in its own namespace: feel free to use the declaration we've provided below if you'd like.
;; **

;; @@
(ns wandering-brook
  (:require [gorilla-plot.core :as plot]
             [incanter.core :as i]
            [incanter.io :as iio]
            [incanter.stats :as is]
            [clojure.core.matrix.stats :as cstat]
            [clojure.core.matrix :as cm]
            [clojure.core.matrix.dataset :as cd]
            [clojure.core.matrix.selection :as cms]
            [clojure.core.matrix.operators :as co]
            [clojure.test :as t]
            [incanter-gorilla.render])
  ;(:use [com.rpl.specter][com.rpl.specter.macros])
  )
(use 'com.rpl.specter)
(use 'com.rpl.specter.macros)

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(transform [ALL :a even?]
              inc
			[{:a 1} {:a 2}])
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"list-like","open":"<span class='clj-map'>{</span>","close":"<span class='clj-map'>}</span>","separator":", ","items":[{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:a</span>","value":":a"},{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"}],"value":"[:a 1]"}],"value":"{:a 1}"},{"type":"list-like","open":"<span class='clj-map'>{</span>","close":"<span class='clj-map'>}</span>","separator":", ","items":[{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:a</span>","value":":a"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"}],"value":"[:a 3]"}],"value":"{:a 3}"}],"value":"[{:a 1} {:a 3}]"}
;; <=

;; @@
(def ds (cd/dataset [:a :b] [[1 nil] [3 4]]))
ds
;; @@
;; =>
;;; {"type":"list-like","open":"<center><table>","close":"</table></center>","separator":"\n","items":[{"type":"list-like","open":"<tr><th>","close":"</th></tr>","separator":"</th><th>","items":[{"type":"html","content":"<span class='clj-keyword'>:a</span>","value":":a"},{"type":"html","content":"<span class='clj-keyword'>:b</span>","value":":b"}],"value":"[:a :b]"},{"type":"list-like","open":"<tr><td>","close":"</td></tr>","separator":"</td><td>","items":[{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}],"value":"(1 nil)"},{"type":"list-like","open":"<tr><td>","close":"</td></tr>","separator":"</td><td>","items":[{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"},{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"}],"value":"(3 4)"}],"value":"\n| :a | :b |\n|----+----|\n|  1 |    |\n|  3 |  4 |\n"}
;; <=

;; @@
(select [ALL ALL (comp not nil?) ]        
  (cd/to-map ds))
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:a</span>","value":":a"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"}],"value":"[1 3]"},{"type":"html","content":"<span class='clj-keyword'>:b</span>","value":":b"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"},{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"}],"value":"[nil 4]"}],"value":"[:a [1 3] :b [nil 4]]"}
;; <=

;; @@
(->> (cd/to-map ds) 
     (map (fn[[k v :as i]][k (->> v (remove nil?) count)]))
     )
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-lazy-seq'>(</span>","close":"<span class='clj-lazy-seq'>)</span>","separator":" ","items":[{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:a</span>","value":":a"},{"type":"html","content":"<span class='clj-unkown'>2</span>","value":"2"}],"value":"[:a 2]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:b</span>","value":":b"},{"type":"html","content":"<span class='clj-unkown'>1</span>","value":"1"}],"value":"[:b 1]"}],"value":"([:a 2] [:b 1])"}
;; <=

;; @@

;; @@
